"use client";

import Image from "next/image";
import tasklogo from "./../../../assets/images/tasklogo.png";
import Link from "next/link";
import { useState, useEffect } from "react";
import { supabase } from "@/lib/supabaseClient";
import { useRouter, useParams } from "next/navigation";

export default function Page() {
  const params = useParams<{ id: string }>();
  const taskId = params?.id; // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô string

  const router = useRouter();

  // form state
  const [title, setTitle] = useState<string>("");
  const [detail, setDetail] = useState<string>("");
  const [imageFile, setImageFile] = useState<File | null>(null); // <- rename ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
  const [isCompleted, setIsCompleted] = useState<boolean>(false);
  const [previewImage, setPreviewImage] = useState<string | null>(null); // URL (db ‡∏´‡∏£‡∏∑‡∏≠ blob)
  const [oldImageUrl, setOldImageUrl] = useState<string | null>(null);


  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
  useEffect(() => {
    if (!taskId) return;

    const fetchTaskById = async () => {
      const { data, error } = await supabase
        .from("task_tb")
        .select("*")
        .eq("id", taskId)
        .single();

      if (error) {
        console.error(error);
        alert("‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö");
        return;
      }

      setTitle(data?.title ?? "");
      setDetail(data?.detail ?? "");
      setIsCompleted(Boolean(data?.is_completed));
      setPreviewImage(data?.image_url ?? null);
      setOldImageUrl(data?.image_url ?? null);
    };

    fetchTaskById();
  }, [taskId]);

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setImageFile(file);
      setPreviewImage(URL.createObjectURL(file)); // blob url
    }
  };


  function extractPathFromPublicUrl(publicUrl: string): string | null {
  try {
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á URL:
    // https://xxx.supabase.co/storage/v1/object/public/task_bk/1696255555-photo.jpg
    const u = new URL(publicUrl);
    const marker = "/storage/v1/object/public/";
    const i = u.pathname.indexOf(marker);
    if (i === -1) return null;

    const after = u.pathname.slice(i + marker.length); // "task_bk/1696...jpg"
    const parts = after.split("/");
    if (parts.length < 2) return null; // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ bucket + ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    // parts[0] ‡∏Ñ‡∏∑‡∏≠ bucket "task_bk" ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏≠ path ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô bucket
    return parts.slice(1).join("/"); // "1696...jpg"
  } catch {
    return null;
  }
}



  const handleUpdateTask = async (event: React.FormEvent<HTMLFormElement>) => {
  event.preventDefault();
  if (!taskId) return;

  const oldPublicUrl = oldImageUrl || "";     // <- URL ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å DB (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà previewImage)
  let newPublicUrl = oldPublicUrl;
  let newFilePath: string | null = null;

  // 1) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  if (imageFile) {
    const uploadPath = `${Date.now()}-${imageFile.name}`; // ‡∏≠‡∏±‡∏õ‡∏ó‡∏µ‡πà root bucket
    const { error: uploadError } = await supabase.storage
      .from("task_bk")
      .upload(uploadPath, imageFile, {
        cacheControl: "3600",
        upsert: false,
        contentType: imageFile.type || "image/*",
      });
    if (uploadError) { alert("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); return; }

    const { data: publicData } = supabase.storage
      .from("task_bk")
      .getPublicUrl(uploadPath);

    newPublicUrl = publicData.publicUrl;
    newFilePath = uploadPath;
  }

  // 2) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DB
  const { error: updateError } = await supabase
    .from("task_tb")
    .update({
      title,
      detail,
      image_url: newPublicUrl,
      is_completed: isCompleted,
      updated_at: new Date().toISOString(),
    })
    .eq("id", taskId);
  if (updateError) { alert("‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"); return; }

  // 3) ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞ URL ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô public URL)
  if (imageFile && oldPublicUrl && !oldPublicUrl.startsWith("blob:")) {
    const oldPath = extractPathFromPublicUrl(oldPublicUrl);
    if (oldPath && oldPath !== newFilePath) {
      const { error: deleteError } = await supabase.storage
        .from("task_bk")
        .remove([oldPath]);
      if (deleteError) console.warn("‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", deleteError);
    }
  }

  alert("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
  router.push("/alltask");
};


  return (
    <div className="pt-20">
      <div className="flex flex-col items-center">
        <Image src={tasklogo} alt="tasklogo" width={100} height={100} />
        <h1 className="text-xl font-bold mt-5 mb-7">Manage Task App</h1>
      </div>

      <div className="max-w-3xl w-full border border-gray-500 p-10 mx-auto rounded-xl">
        <h1 className="text-xl font-bold text-center">üîÉ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô</h1>

        <form onSubmit={handleUpdateTask} className="w-full space-y-4">
          <div>
            <label className="block mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô</label>
            <input
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              type="text"
              className="w-full border rounded-lg p-2"
              required
            />
          </div>

          <div>
            <label className="block mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
            <textarea
              value={detail}
              onChange={(e) => setDetail(e.target.value)}
              className="w-full border rounded-lg p-2"
              rows={5}
              required
            />
          </div>

          <div>
            <label className="block mb-1 font-medium">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ</label>
            <input
              id="fileInput"
              type="file"
              accept="image/*"
              onChange={handleImageChange}
              className="hidden"
            />
            <label
              htmlFor="fileInput"
              className="inline-block cursor-pointer text-white hover:bg-violet-600 px-4 py-2 rounded border bg-violet-400 text-center"
            >
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ
            </label>
          </div>

          {previewImage && (
            <div className="mt-2">
              {/* ‡πÉ‡∏ä‡πâ <img> ‡∏Å‡∏±‡∏ö blob URL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô/optimization */}
              <img
                src={previewImage}
                alt="Preview"
                className="w-36 h-36 object-cover rounded-md"
              />
            </div>
          )}

          <div>
            <label className="block mb-1">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
            <select
              className="w-full border rounded-lg p-2 mb-2"
              value={isCompleted ? "1" : "0"}
              onChange={(e) => setIsCompleted(e.target.value === "1")}
            >
              <option value="0">‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à</option>
              <option value="1">‚úîÔ∏è ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
            </select>
          </div>

          <div>
            <button
              type="submit"
              className="text-white hover:bg-violet-600 block px-4 py-2 rounded border bg-violet-400 text-center"
            >
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô
            </button>
          </div>
        </form>

        <Link
          href="/alltask"
          className="text-violet-400 hover:text-violet-600 block px-4 py-2 rounded text-center mt-10"
        >
          ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        </Link>
      </div>
    </div>
  );
}
